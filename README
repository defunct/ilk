Ilk

An implementation of super type tokens (Gafter's Gadget). 

    Source: http://github.com/bigeasy/ilk
    Documentation: http://wiki.github.com/bigeasy/ilk

    Issues and Tasks: http://bigeasy.lighthouseapp.com/projects/28908-ilk

    License: The MIT License

PURPOSE

Ilk is my implementation of super type tokens, for inclusion in my projects, so
that I don't have to borrow an implementation from Guice.

Ilk.Key mapKey = new Ilk<Map<String, List<String>>() {};

assertTrue(mapKey.get(1).getKey().equals(new Ilk<List<String>>(){}.key));
assertFalse(mapKey.get(1).getKey().equals(new Ilk<List<Integer>>(){}.key));

IlkOutputStream out = new IlkOutputStream(new FileOutputStream("ilky.data"));
out.writeObject(new Ilk<List<String>>(){}, new List<String>());
out.close();

IlkInputStream in = new IlkInputStream(new FileInputSTream("ilky.data"));
List<String> strings = in.readObject(new Ilk<List<String>>(){});
in.close();

With Ilk, you do not have to use @SuppressWarnings("unchecked") in your code.
You can safely cast to a generic type.

Ilk.Pair pair = new Ilk<List<String>>() { }.pair(new ArrayList<String>());

List<String> list = pair.cast(new Ilk<List<String>>() { });

MOTIVATION

Creating a super type token to pull into projects encourages type-safe thinking.
